// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "vlcvideo.h"

// Dispatch interfaces referenced by this interface
#include "Picture.h"


/////////////////////////////////////////////////////////////////////////////
// CVLCVideo properties

/////////////////////////////////////////////////////////////////////////////
// CVLCVideo operations

BOOL CVLCVideo::GetFullscreen()
{
    BOOL result;
    InvokeHelper(0x60020000, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
    return result;
}

void CVLCVideo::SetFullscreen(BOOL bNewValue)
{
    static BYTE parms[] =
        VTS_BOOL;
    InvokeHelper(0x60020000, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
                 bNewValue);
}

long CVLCVideo::GetWidth()
{
    long result;
    InvokeHelper(0x60020002, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
    return result;
}

long CVLCVideo::GetHeight()
{
    long result;
    InvokeHelper(0x60020003, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
    return result;
}

CString CVLCVideo::GetAspectRatio()
{
    CString result;
    InvokeHelper(0x60020004, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
    return result;
}

void CVLCVideo::SetAspectRatio(LPCTSTR lpszNewValue)
{
    static BYTE parms[] =
        VTS_BSTR;
    InvokeHelper(0x60020004, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
                 lpszNewValue);
}

long CVLCVideo::GetSubtitle()
{
    long result;
    InvokeHelper(0x60020006, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
    return result;
}

void CVLCVideo::SetSubtitle(long nNewValue)
{
    static BYTE parms[] =
        VTS_I4;
    InvokeHelper(0x60020006, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
                 nNewValue);
}

CString CVLCVideo::GetCrop()
{
    CString result;
    InvokeHelper(0x60020008, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
    return result;
}

void CVLCVideo::SetCrop(LPCTSTR lpszNewValue)
{
    static BYTE parms[] =
        VTS_BSTR;
    InvokeHelper(0x60020008, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
                 lpszNewValue);
}

long CVLCVideo::GetTeletext()
{
    long result;
    InvokeHelper(0x6002000a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
    return result;
}

void CVLCVideo::SetTeletext(long nNewValue)
{
    static BYTE parms[] =
        VTS_I4;
    InvokeHelper(0x6002000a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
                 nNewValue);
}

void CVLCVideo::toggleFullscreen()
{
    InvokeHelper(0x6002000c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

CPicture CVLCVideo::takeSnapshot()
{
    LPDISPATCH pDispatch;
    InvokeHelper(0x6002000d, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, NULL);
    return CPicture(pDispatch);
}

void CVLCVideo::toggleTeletext()
{
    InvokeHelper(0x6002000e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
