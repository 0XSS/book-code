// console_template.cpp : Defines the entry point for the console application.
//

//#include "targetver.h"
#define STATIC_GETOPT
#include <getopt.h>
#include <openssl/pem.h>
#include <openssl/err.h>
#include <openssl/rsa.h>

#include <msgpack.hpp>
#include <stdio.h>
#include <tchar.h>
#include <locale.h>
#include <iostream>
#include <string>
#include <sstream>
#include <fstream>
#include <vector>
#include <cassert>

#define READPUB 0
#define READSEC 1

#define SECFILE "sec.pem"
#define PUBFILE "pub.pem"

#define VERSION "1.0.2"
#define ARGUMENTS "g:cdi:o:vh"

void genkey(int size);
RSA* readpemkeys(int type);
int rsa_encrypt(RSA *key, unsigned char *plain, int len, unsigned char **cipher);
int rsa_decrypt(RSA *key, unsigned char *cipher, int len, unsigned char **plain);
void showHelp();


bool file_get_contents(const std::wstring& filename, std::vector<unsigned char>& buffer)
{
    std::ifstream file(filename.c_str(), std::ios_base::binary);

    if (file) {
        file.seekg(0, std::ios_base::end);
        std::streamsize size = file.tellg();

        if (size > 0) {
            file.seekg(0, std::ios_base::beg);
            buffer.resize(static_cast<std::size_t>(size));
            file.read((char*)&buffer[0], size);
        }

        return true;
    } else {
        return false;
    }
}


int _tmain(int argc, TCHAR* argv[])
{
    _tsetlocale(LC_ALL, _T(""));
    std::wcout.imbue(std::locale(""));
    HRESULT nResult = S_OK;


	int ch,size=0,len=0,ks=0;
	RSA *key=NULL;
	FILE *fpin=NULL, *fpout=NULL;
	unsigned char *cipher=NULL,*plain=NULL;


    std::wstring input_filename;
	std::wstring output_filename;
	bool crypts_flag = false;
	bool decrypt_flag = false;
    int bits;
    int c;
    static struct option long_options[] = {
        {_T("generates RSA keys and save them in PEM format"),  ARG_REQ,  0, _T('g')},
		{_T("crypts"),  ARG_NONE,  0, _T('c')},
		{_T("decrypt"),  ARG_NONE,  0, _T('d')},
		{_T("input filename"),  ARG_REQ,  0, _T('i')},
        {_T("output filename"),  ARG_REQ,  0, _T('o')},
        {_T("version"), ARG_NONE, 0 , _T('v')},
        {_T("help"),    ARG_NONE, 0 , _T('h')},
        { ARG_NULL , ARG_NULL , ARG_NULL , ARG_NULL }
    };

    while (1) {
        int option_index = 0;
        c = getopt_long(argc, argv, _T(ARGUMENTS), long_options, &option_index);

        // Check for end of operation or error
        if (c == -1 || c == '?') {
            break;
        }

        // Handle options
        switch (c) {
        case _T('g'):
            bits = _wtoi(optarg);
            _tprintf(_T("Generating RSA keys [size = %d bits]\n"), bits);
			genkey(bits);
            _tprintf(_T("Private Key saved in %s file.\n"), _T(SECFILE));
            _tprintf(_T("Public Key saved in %s file.\n"), _T(PUBFILE));
            _tprintf(_T("Done.\n"));
            break;
		case _T('c'):
			crypts_flag = true;
			break;
		case _T('d'):
			decrypt_flag = true;
			break;
		case _T('i'):
			input_filename = optarg;
			_tprintf(_T("input:%s\n"), input_filename.c_str());
			break;
		case _T('o'):
			output_filename = optarg;
			_tprintf(_T("output:%s\n"), output_filename.c_str());
			break;

        case _T('v'):
            _tprintf(_T(VERSION));
            nResult |= S_OK;
            break;

        case _T('h'):
            showHelp();
            nResult |= S_OK;
            break;

        default:
            showHelp();
            break;
        }
    }


	if (crypts_flag && !input_filename.empty() && !output_filename.empty()) {
		key = readpemkeys(READPUB);
		if(!(fpin = _tfopen(input_filename.c_str(), _T("r")))) {
			fwprintf(stderr, TEXT("Error: Cannot locate input file.\n"));			
			exit(EXIT_FAILURE);
		}
		fpout = _tfopen(output_filename.c_str(), _T("w"));
		ks = RSA_size(key);
		plain = (unsigned char *)malloc(ks * sizeof(unsigned char));
		cipher = (unsigned char*)malloc(ks * sizeof(unsigned char));
		_tprintf(_T("Encrypting '%s' file.\n"), input_filename.c_str());
		while(!feof(fpin)) {
			memset(plain,'\0',ks + 1);
			memset(cipher, '\0', ks + 1);
			len = fread(plain, 1, ks - 11, fpin);
			size = rsa_encrypt(key, plain, len, &cipher);
			fwrite(cipher, 1, size, fpout);
		}
		fclose(fpout);
		fclose(fpin);
		//free(cipher);
		//free(plain);
		RSA_free(key);
		_tprintf(_T("Done.\n"));

	} else if (decrypt_flag && !input_filename.empty() && !output_filename.empty()) {
		
		key = readpemkeys(READSEC);
		if(!(fpin = _tfopen(input_filename.c_str(), _T("r")))) {
			fwprintf(stderr, TEXT("Error: Cannot locate input file.\n"));
			exit(EXIT_FAILURE);
		}
		fpout = _tfopen(output_filename.c_str(), _T("w"));
		ks = RSA_size(key);
		cipher = (unsigned char*)malloc(ks * sizeof(unsigned char));
		plain = (unsigned char*)malloc(ks * sizeof(unsigned char));
		_tprintf(_T("Decrypting '%s' file.\n"), input_filename.c_str());
		while(!feof(fpin)) {
			memset(cipher, '\0', ks);
			memset(plain, '\0', ks);
			if ((len = fread(cipher, 1, ks, fpin)) == 0)
				break;
			size = rsa_decrypt(key, cipher, len, &plain);
			fwrite(plain, 1, size, fpout);
		}
		fclose(fpout);
		fclose(fpin);
		//free(plain);
		//free(cipher);
		RSA_free(key);
		_tprintf(_T("Done.\n"));

	}


    return int(nResult);
}


void showHelp()
{
    printf("dgconsole %s\n\n", VERSION);
    printf("Usage: dgconsole <options>\n\n");
    printf("Example:\n");
    printf("以下删除该键值下的一个注册表值\n");
    printf("  dgconsole.exe -g\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Class\\{4D36E967-E325-11CE-BFC1-08002BE10318}\" -m\"test001\"\n\n");
    printf("以下删除该键值下的两个注册表值\n");
    printf("  dgconsole.exe -g\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Class\\{4D36E967-E325-11CE-BFC1-08002BE10318}\" -m\"test001\" -m\"test002\"\n\n");
    printf("禁用设备\n");
    printf("  dgconsole.exe -d\"设备实例ID\"\n\n");
    printf("启用设备\n");
    printf("  dgconsole.exe -e\"设备实例ID\"\n\n");
    printf("删除设备\n");
    printf("  dgconsole.exe -r\"设备实例ID\"\n\n");
    printf("反安装驱动\n");
    printf("  dgconsole.exe -u\"设备实例ID\"\n\n");
    printf("安装驱动 \n");
    printf("  dgconsole.exe -p\"inf文件路径\" -i\"设备实例ID\"\n\n");
    printf("先禁用再启用,组合命令\n");
    printf("  dgconsole.exe -d\"设备实例ID\" -e\"设备实例ID\"\n\n");
    printf("先删除注册表，再启用设备\n");
    printf("  dgconsole.exe -g\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Class\\{4D36E967-E325-11CE-BFC1-08002BE10318}\" -m\"test001\" -e\"设备实例ID\"\n\n");
    printf("关机\n");
    printf("  dgconsole.exe -c\n\n");
    printf("重启\n");
    printf("  dgconsole.exe -b\n\n");
    printf("获取显示器信息\n");
    printf("  dgconsole.exe -a\"display_info\"\n\n");
    printf("设置显示器最佳分辨率\n");
    printf("  dgconsole.exe -a\"set_monitor_display_resolution\"\n\n");
    exit(0);
}



void genkey(int size)
{
    RSA *key = NULL;
    FILE *fp;

    if ((key = RSA_generate_key(size, 3, NULL, NULL)) == NULL) {
        fprintf(stderr, "%s\n", ERR_error_string(ERR_get_error(), NULL));
        exit(EXIT_FAILURE);
    }

    if (RSA_check_key(key) < 1) {
        fprintf(stderr, "Error: Problems while generating RSA Key.\nRetry.\n");
        exit(EXIT_FAILURE);
    }

    fp = fopen(SECFILE, "w");

    if (PEM_write_RSAPrivateKey(fp, key, NULL, NULL, 0, 0, NULL) == 0) {
        fprintf(stderr, "Error: problems while writing RSA Private Key.\n");
        exit(EXIT_FAILURE);
    }

    fclose(fp);
    fp = fopen(PUBFILE, "w");

    if (PEM_write_RSAPublicKey(fp, key) == 0) {
        fprintf(stderr, "Error: problems while writing RSA Public Key.\n");
        exit(EXIT_FAILURE);
    }

    fclose(fp);
    RSA_free(key);
    return;
}


RSA* readpemkeys(int type)
{
	FILE *fp;
	RSA *key=NULL;

	if(type == READPUB) {
		if((fp = fopen(PUBFILE,"r")) == NULL) {
			fprintf(stderr,"Error: Public Key file doesn't exists.\n");
			exit(EXIT_FAILURE);
		}
		if((key = PEM_read_RSAPublicKey(fp,NULL,NULL,NULL)) == NULL) {
			fprintf(stderr,"Error: problems while reading Public Key.\n");
			exit(EXIT_FAILURE);
		}
		fclose(fp);
		return key;
	}
	if(type == READSEC) {
		if((fp = fopen(SECFILE,"r")) == NULL) {
			fprintf(stderr,"Error: Private Key file doesn't exists.\n");
			exit(EXIT_FAILURE);
		}
		if((key = PEM_read_RSAPrivateKey(fp,NULL,NULL,NULL)) == NULL) {
			fprintf(stderr,"Error: problmes while reading Private Key.\n");
			exit(EXIT_FAILURE);
		}
		fclose(fp);
		if(RSA_check_key(key) == -1) {
			fprintf(stderr,"Error: Problems while reading RSA Private Key in '%s' file.\n",SECFILE);
			exit(EXIT_FAILURE);
		} else if(RSA_check_key(key) == 0) {
			fprintf(stderr,"Error: Bad RSA Private Key readed in '%s' file.\n",SECFILE);
			exit(EXIT_FAILURE);
		}
		else
			return key;
	}
	return key;
}

int rsa_encrypt(RSA *key, unsigned char *plain, int len, unsigned char **cipher)
{
	int clen=0;

	srand(time(NULL));
	if((clen = RSA_public_encrypt(len, plain, *cipher, key, RSA_PKCS1_PADDING)) == -1) {
		fprintf(stderr, "%s\n", ERR_error_string(ERR_get_error(), NULL));
		exit(EXIT_FAILURE);
	} else
		return clen;
}

int rsa_decrypt(RSA *key, unsigned char *cipher, int len, unsigned char **plain)
{
	int plen=0;

	if((plen = RSA_private_decrypt(len, cipher, *plain, key, RSA_PKCS1_PADDING)) == -1) {
		fprintf(stderr, "%s\n", ERR_error_string(ERR_get_error(), NULL));
		exit(EXIT_FAILURE);
	} else
		return plen;
}