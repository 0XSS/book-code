<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML xmlns="http://www.w3.org/1999/xhtml" xmlns:html = 
"http://www.w3.org/1999/xhtml"><HEAD><TITLE>各种内部排序方法的比较和选择 - 笨鸟</TITLE>
<META http-equiv=content-type content="text/html; charset=gb2312"><LINK 
href="../../templates/default/index.css" rel=stylesheet></LINK>
<SCRIPT language=javascript>
try{
top.document.title="各种内部排序方法的比较和选择  - 笨鸟";
}catch(e){
}
</SCRIPT>

<META content="MSHTML 6.00.2900.2963" name=GENERATOR></head>
<BODY style="BACKGROUND: #c7c7c7" leftMargin=0 topMargin=0 marginwidth="0" 
marginheight="0" align="center"><table border="0" width="100%" id="table1" style="border-collapse: collapse" bgcolor="#FFFFCC"><tr><td>由于程序的原因，本文件未被完整保存。</td></tr></table>
<TABLE id=table1 style="BORDER-COLLAPSE: collapse" width="100%" bgColor=#ffffcc 
border=0>
  <TBODY>
  <TR>
    <TD><FONT face=Verdana size=2></FONT></TD></TR></TBODY></TABLE>
<CENTER>
<TABLE style="BORDER-COLLAPSE: collapse; WORD-WRAP: break-word" cellSpacing=0 
cellPadding=0 width=760 bgColor=#ffffff border=0>
  <TBODY><!--StartFragment-->
  <TR>
    <TD align=middle height=25><FONT face=Verdana><FONT size=2><FONT 
      style="FONT-SIZE: 14pt" color=#02368d><B>各种内部排序方法的比较和选择 
      </B></FONT><BR></FONT></FONT></TD></TR>
  <TR>
    <TD align=middle height=9><FONT face=Verdana size=2><IMG height=9 alt="" 
      src="../../templates/default/images/right_line.gif" width=502 
      border=0></FONT></TD></TR>
  <TR>
    <TD align=middle>
      <TABLE style="BORDER-COLLAPSE: collapse; WORD-WRAP: break-word" 
      cellSpacing=0 cellPadding=0 width=740 border=0>
        <TBODY>
        <TR>
          <TD width=740>
            <DIV id=art style="MARGIN: 15px" width="560">
            <DIV>
            <P style="LINE-HEIGHT: 150%"><FONT face=Verdana><FONT 
            size=2><B>按平均时间将排序分为四类：<BR></B><BR><FONT 
            color=#0000ff>（1）平方阶(O(n<SUP>2</SUP>))排序</FONT><BR>　一般称为简单排序，例如直接插入、直接选择和冒泡排序；<BR></FONT></FONT><FONT 
            color=#0000ff><BR><FONT face=Verdana 
            size=2>（2）线性对数阶(O(nlgn))排序</FONT></FONT><BR><FONT face=Verdana 
            size=2>　如快速、堆和归并排序；<BR></FONT><FONT color=#0000ff><BR><FONT 
            face=Verdana size=2>（3）O(n<SUP>1+￡</SUP>)阶排序</FONT></FONT><BR><FONT 
            face=Verdana 
            size=2>　￡是介于0和1之间的常数，即0&lt;￡&lt;1，如希尔排序；<BR></FONT><FONT 
            color=#0000ff><BR><FONT face=Verdana 
            size=2>（4）线性阶(O(n))排序</FONT></FONT><BR><FONT face=Verdana 
            size=2>　如桶、箱和基数排序。<BR><BR></FONT><FONT face=Verdana><FONT 
            size=2><B>各种排序方法比较<BR></B><BR>简单排序中直接插入最好，快速排序最快，当文件为正序时，直接插入和冒泡均最佳。<BR><BR></FONT></FONT><FONT 
            face=Verdana><FONT 
            size=2><B>影响排序效果的因素<BR></B><BR>　因为不同的排序方法适应不同的应用环境和要求，所以选择合适的排序方法应综合考虑下列因素：<BR>　　①待排序的记录数目n；<BR>　　②记录的大小(规模)；<BR>　　③关键字的结构及其初始状态；<BR>　　④对稳定性的要求；<BR>　　⑤语言工具的条件；<BR>　　⑥存储结构；<BR>　　⑦时间和辅助空间复杂度等。<BR></FONT></FONT><FONT 
            color=#008000><BR></FONT><FONT face=Verdana><FONT 
            size=2><B>不同条件下，排序方法的选择<BR></B><BR>(1)若n较小(如n≤50)，可采用直接插入或直接选择排序。<BR>　当记录规模较小时，直接插入排序较好；否则因为直接选择移动的记录数少于直接插人，应选直接选择排序为宜。<BR>(2)若文件初始状态基本有序(指正序)，则应选用直接插人、冒泡或随机的快速排序为宜；<BR>(3)若n较大，则应采用时间复杂度为O(nlgn)的排序方法：快速排序、堆排序或归并排序。<BR>　快速排序是目前基于比较的内部排序中被认为是最好的方法，当待排序的关键字是随机分布时，快速排序的平均时间最短；<BR>　堆排序所需的辅助空间少于快速排序，并且不会出现快速排序可能出现的最坏情况。这两种排序都是不稳定的。<BR>　若要求排序稳定，则可选用归并排序。但本章介绍的从单个记录起进行两两归并的 
            排序算法并不值得提倡，通常可以将它和直接插入排序结合在一起使用。先利用直接插入排序求得较长的有序子文件，然后再两两归并之。因为直接插入排序是稳定的，所以改进后的归并排序仍是稳定的。 
            </FONT></FONT></P>
            <P style="LINE-HEIGHT: 150%"><FONT face=Verdana 
            size=2>(4)在基于比较的排序方法中，每次比较两个关键字的大小之后，仅仅出现两种可能的转移，因此可以用一棵二叉树来描述比较判定过程。<BR>　当文件的n个关键字随机分布时，任何借助于"比较"的排序算法，至少需要O(nlgn)的时间。<BR>　箱排序和基数排序只需一步就会引起m种可能的转移，即把一个记录装入m个箱子之一，因此在一般情况下，箱排序和基数排序可能在O(n)时间内完成对n个记录的排序。但是，箱排序和基数排序只适用于像字符串和整数这类有明显结构特征的关键字，而当关键字的取值范围属于某个无穷集合(例如实数型关键字)时，无法使用箱排序和基数排序，这时只有借助于"比较"的方法来排序。<BR>　若n很大，记录的关键字位数较少且可以分解时，采用基数排序较好。虽然桶排序对关键字的结构无要求，但它也只有在关键字是随机分布时才能使平均时间达到线性阶，否则为平方阶。同时要注意，箱、桶、基数这三种分配排序均假定了关键字若为数字时，则其值均是非负的，否则将其映射到箱(桶)号时，又要增加相应的时间。<BR>(5)有的语言(如Fortran，Cobol或Basic等)没有提供指针及递归，导致实现归并、快速(它们用递归实现较简单)和基数(使用了指针)等排序算法变得复杂。此时可考虑用其它排序。<BR>(6)本章给出的排序算法，输人数据均是存储在一个向量中。当记录的规模较大时，为避免耗费大量的时间去移动记录，可以用链表作为存储结构。譬如插入排序、归并排序、基数排序都易于在链表上实现，使之减少记录的移动次数。但有的排序方法，如快速排序和堆排序，在链表上却难于实现，在这种情况下，可以提取关键字建立索引表，然后对索引表进行排序。然而更为简单的方法是：引人一个整型向量t作为辅助表，排序前令t[i]=i(0≤i&lt;n)，若排序算法中要求交换R[i]和R[j]，则只需交换t[i]和t[j]即可；排序结束后，向量t就指示了记录之间的顺序关系：<BR>R[t[0]].key≤R[t[1]].key≤…≤R[t[n-1]].key<BR>若要求最终结果是：<BR>R[0].key≤R[1].key≤…≤R[n-1].key<BR>则可以在排序结束后，再按辅助表所规定的次序重排各记录，完成这种重排的时间是O(n)。</FONT></P></DIV></DIV></TD></TR></TBODY></TABLE></TD></TR><!--EndFragment--></TBODY></TABLE></CENTER></BODY></HTML>
